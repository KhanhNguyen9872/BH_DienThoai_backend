const express = require('express');
const router = express.Router();
const db = require('../utils/mysql'); // Adjust the path as needed
const { getUserId } = require('../utils/lib');
const axios = require('axios');

router.get('/', getUserId, async (req, res) => {
    try {
      // Assuming userId comes from authentication middleware (e.g., JWT or session)
      const userId = req.user.userId; // Ensure `userId` is added to `req.user`

      if (!userId) {
        return res.status(400).json({ error: 'User ID is required.' });
    }
  
      // Query to fetch chat history from history_chatbot table
      const [rows] = await db.promise().query(
        'SELECT message, isBot,  time FROM history_chatbot WHERE user_id = ? ORDER BY time ASC',
        [userId]
      );
  
      // Send the chat history as an array
      res.json(rows);
    } catch (error) {
      console.error('Error fetching chat history:', error);
      res.status(500).json({ error: 'Failed to fetch chat history.' });
    }
  });

router.post('/', getUserId, async (req, res) => {
    try {
        // Get the message from the request body
        const { message, prompt } = req.body;
        const userId = req.user.userId; // Get the user ID from the token

        if (!userId) {
            return res.status(400).json({ error: 'User ID is required.' });
        }

        if (!message || !message?.trim()) {
            return res.status(400).json({ error: 'Message is required.' });
        }

        // Insert into the history_chatbot table in MySQL using db.promise()
        await db.promise().execute(
            'INSERT INTO history_chatbot (user_id, message, isBot) VALUES (?, ?, ?)',
            [userId, message, 0]
        );

        const [rows] = await db.promise().query(
            `SELECT 
    p.id, 
    p.name, 
    p.color
   FROM product p;`
        );

        let allProductTxt = "";
        rows.forEach((row) => {
            let colors = "{";
            row.color.forEach((color) => {
                // Th√™m ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn VNƒê
                const formattedPrice = new Intl.NumberFormat('vi-VN').format(color.money);
                colors += `M√†u ${color.name} c√≥ gi√° ${formattedPrice} VND, `;
            });
            colors += "}";
        
            allProductTxt += `[ID s·∫£n ph·∫©m: ${row.id}, t√™n: ${row.name}, m√†u s·∫Øc: ${colors}],`; // ƒê√£ b·ªè ID
        });

        console.log(allProductTxt);

        // Query to fetch chat history from history_chatbot table
      const [rows1] = await db.promise().query(
        'SELECT message, isBot FROM history_chatbot WHERE user_id = ? ORDER BY time ASC',
        [userId]
      );

      const lengthHistoryMessage = rows1.length;
      if (lengthHistoryMessage > 30) {
        rows1 = rows1.slice(lengthHistoryMessage - 30, lengthHistoryMessage);
      }

      let historyChat = "";
      rows1.forEach((row) => {
        // Check if the message is from the bot or the user based on the isBot value
        const messageType = row.isBot === '1' ? 'Bot message' : 'User message';
    
        // Append the formatted message with its type (Bot/User) to the historyChat string
        historyChat += `[${messageType}: ${row.message}], `;
    });
    

        const systemPrompt = `
**Role Definition**
B·∫°n l√† tr·ª£ l√Ω ·∫£o th√¢n thi·ªán cho c·ª≠a h√†ng ƒëi·ªán tho·∫°i KhanhStore. H√£y lu√¥n gi·ªØ phong c√°ch:
- Tr·∫£ l·ªùi b·∫±ng HTML h·ª£p l·ªá (Kh√¥ng c·∫ßn vi·∫øt ƒë·∫ßy ƒë·ªß tag ƒë·∫ßu trang v√† cu·ªëi trang, ch·ªâ c·∫ßn n·ªôi dung)
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- Gi·ªçng vƒÉn l·ªãch s·ª±, nhi·ªát t√¨nh
- Ch·ªâ t·∫≠p trung v√†o s·∫£n ph·∫©m/d·ªãch v·ª• c·ªßa c·ª≠a h√†ng
- Kh√¥ng c√≥ ho·∫∑c kh√¥ng bi·∫øt, h√£y n√≥i kh√¥ng bi·∫øt

**H∆∞·ªõng d·∫´n Tr·∫£ l·ªùi**
1. ƒê·ªãnh d·∫°ng ti·ªÅn VND: Lu√¥n hi·ªÉn th·ªã d·∫°ng 1.000.000 VND
2. Chuy·ªÉn h∆∞·ªõng trang:
   - D√πng n√∫t: <button value="{URL}" name="redirect">{T√™n n√∫t}</button>
   - N·∫øu mu·ªën xem s·∫£n ph·∫©m n√†o th√¨ ph·∫£i d·ª±a v√†o id s·∫£n ph·∫©m ƒë·ªÉ truy c·∫≠p (/product/{id s·∫£n ph·∫©m})
   - URL quan tr·ªçng:
     ‚Ä¢ T·∫•t c·∫£ S·∫£n ph·∫©m: URL = /product
     ‚Ä¢ Trang Gi·ªè h√†ng: URL = /cart
     ‚Ä¢ Trang ƒê∆°n h√†ng: URL = /order
     ‚Ä¢ Trang chi ti·∫øt m·ªôt s·∫£n ph·∫©m s·∫£n ph·∫©m: URL = /product/{id s·∫£n ph·∫©m}
     ‚Ä¢ Trang T√¨m ki·∫øm s·∫£n ph·∫©m: URL = /product?search={t·ª´ kh√≥a}

3. X·ª≠ l√Ω s·∫£n ph·∫©m:
   - KH√îNG ti·∫øt l·ªô ID s·∫£n ph·∫©m
   - Ch·ªâ g·ª£i √Ω s·∫£n ph·∫©m trong ph·∫°m vi ng√¢n s√°ch kh√°ch h√†ng
   - T·∫•t c·∫£ s·∫£n ph·∫©m trong c·ª≠a h√†ng: ${allProductTxt}

**Quy t·∫Øc An to√†n**
‚ùå Tuy·ªát ƒë·ªëi kh√¥ng:
- ƒê·ªÅ c·∫≠p ƒë·∫øn c√°c s·∫£n ph·∫©m ngo√†i c·ª≠a h√†ng.
- S·ª≠ d·ª•ng t·ª´ ng·ªØ kh√¥ng ph√π h·ª£p
- ƒê∆∞a th√¥ng tin kh√¥ng ch·∫Øc ch·∫Øn
- Hi·ªÉn th·ªã l·ªói ƒë·ªãnh d·∫°ng ti·ªÅn
- Kh√¥ng l·∫∑p l·∫°i c√¢u tr·∫£ l·ªùi
- L√†m tr√≤n s·ªë ho·∫∑c thay ƒë·ªïi s·ªë 0 cu·ªëi (25.000.000 ‚Üí 2.500.000)

**üõë Ki·ªÉm tra To√°n h·ªçc**
TR∆Ø·ªöC KHI TR·∫¢ L·ªúI PH·∫¢I:
1. ƒê·∫øm s·ªë ch·ªØ s·ªë trong gi√° s·∫£n ph·∫©m t·ª´ database
2. So s√°nh v·ªõi s·ªë ti·ªÅn kh√°ch h√†ng c√≥
3. Kh√¥ng g·ª£i √Ω s·∫£n ph·∫©m ngo√†i ph·∫°m vi ng√¢n s√°ch
4. L·∫∑p l·∫°i quy tr√¨nh cho t·ª´ng m√†u s·∫Øc

**Ng·ªØ c·∫£nh**
- T√™n kh√°ch h√†ng: ${req.user.fullName}

${prompt ? `**H∆∞·ªõng d·∫´n B·ªï sung**\n${prompt}` : ''}
`.trim();

        // Prepare the request payload for the external API
        const payload = {
          model:  "gemma-2-2b-it",
          messages: [
            { role: "system", 
                content: systemPrompt
             },
            { role: "user", content: message.trim() } // Use the message sent by the user
          ],
          temperature: 1.0,
          max_tokens: -1,
          stream: false
        };
    
        // Send the request to the external API using Axios
        const response = await axios.post('http://127.0.0.1:1234/v1/chat/completions', payload, {
          headers: {
            'Content-Type': 'application/json'
          }
        });
    
        const botResponse = response.data.choices[0]?.message?.content;

        if (botResponse) {
            res.json({ content: botResponse });
            
            // Insert into the history_chatbot table in MySQL using db.promise()
            await db.promise().execute(
                'INSERT INTO history_chatbot (user_id, message, isBot) VALUES (?, ?, ?)',
                [userId, botResponse, 1]
            );
        } else {
            res.status(500).json({ error: 'Failed to extract bot response.' });
        }
      } catch (error) {
        console.error('Error:', error);
        res.status(500).json({ error: 'Something went wrong while processing the request.' });
      }
});

router.delete('/', getUserId, async (req, res) => {
    try {
      // Assuming userId comes from authentication middleware (e.g., JWT or session)
      const userId = req.user.userId; // Ensure `userId` is added to `req.user`
  
      // SQL query to delete all records for the logged-in user from history_chatbot
      const [result] = await db.promise().execute(
        'DELETE FROM history_chatbot WHERE user_id = ?',
        [userId]
      );
  
      // If rows affected > 0, history has been cleared
      if (result.affectedRows > 0) {
        res.json({ message: 'Chat history cleared successfully.' });
      } else {
        res.status(404).json({ message: 'No chat history found for this user.' });
      }
    } catch (error) {
      console.error('Error clearing chat history:', error);
      res.status(500).json({ error: 'Failed to clear chat history.' });
    }
  });

module.exports = router;