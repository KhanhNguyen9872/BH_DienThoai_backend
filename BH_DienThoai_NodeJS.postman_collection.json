{
	"info": {
		"_postman_id": "2e3f7863-2b3f-4830-a068-e9b77b8e4c44",
		"name": "BH_DienThoai_NodeJS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36389747"
	},
	"item": [
		{
			"name": "[/products]",
			"item": [
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Test that each product has the required properties\r",
									"pm.test(\"Each product has id, name, description, favorite, color, created_at, updated_at\", function () {\r",
									"    jsonData.forEach(function(product) {\r",
									"        pm.expect(product).to.have.property(\"id\");\r",
									"        pm.expect(product).to.have.property(\"name\");\r",
									"        pm.expect(product).to.have.property(\"description\");\r",
									"        pm.expect(product).to.have.property(\"favorite\");\r",
									"        pm.expect(product).to.have.property(\"color\");\r",
									"        pm.expect(product).to.have.property(\"created_at\");\r",
									"        pm.expect(product).to.have.property(\"updated_at\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test that each product's color array items have the required properties\r",
									"pm.test(\"Each color entry has img, name, money, and quantity\", function () {\r",
									"    jsonData.forEach(function(product) {\r",
									"        // Ensure that the color property is an array\r",
									"        pm.expect(product.color).to.be.an('array');\r",
									"        product.color.forEach(function(color) {\r",
									"            pm.expect(color).to.have.property(\"img\");\r",
									"            pm.expect(color).to.have.property(\"name\");\r",
									"            pm.expect(color).to.have.property(\"money\");\r",
									"            pm.expect(color).to.have.property(\"quantity\");\r",
									"            // moneyDiscount is optional so we don't check for it\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var product = pm.response.json();\r",
									"\r",
									"// Test that the response is an object\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(product).to.be.an('object');\r",
									"});\r",
									"\r",
									"// Test that the product has the required properties\r",
									"pm.test(\"Product has required properties\", function () {\r",
									"    pm.expect(product).to.have.property(\"id\");\r",
									"    pm.expect(product).to.have.property(\"name\");\r",
									"    pm.expect(product).to.have.property(\"description\");\r",
									"    pm.expect(product).to.have.property(\"favorite\");\r",
									"    pm.expect(product).to.have.property(\"color\");\r",
									"    pm.expect(product).to.have.property(\"created_at\");\r",
									"    pm.expect(product).to.have.property(\"updated_at\");\r",
									"});\r",
									"\r",
									"// Test that favorite is an array of numbers\r",
									"pm.test(\"Favorite is an array of numbers\", function () {\r",
									"    pm.expect(product.favorite).to.be.an('array');\r",
									"    product.favorite.forEach(function(fav) {\r",
									"        pm.expect(fav).to.be.a('number');\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test that the color property is an array and each color object has required properties\r",
									"pm.test(\"Color array is valid\", function () {\r",
									"    pm.expect(product.color).to.be.an('array');\r",
									"    product.color.forEach(function(color) {\r",
									"        pm.expect(color).to.have.property(\"img\");\r",
									"        pm.expect(color).to.have.property(\"name\");\r",
									"        pm.expect(color).to.have.property(\"money\");\r",
									"        pm.expect(color).to.have.property(\"quantity\");\r",
									"        // moneyDiscount is optional, so we don't assert its existence\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add favorite product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct message\r",
									"pm.test(\"Response has correct message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Product added to favorites\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/:id/favorite",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								":id",
								"favorite"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Favorite product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct message\r",
									"pm.test(\"Response has correct message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Product removed from favorites\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/:id/favorite",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								":id",
								"favorite"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[/accounts]",
			"item": [
				{
					"name": "Auth (Login)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"accessToken is not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.accessToken).to.not.be.null;\r",
									"    pm.expect(jsonData.accessToken).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.environment.set('accessToken', pm.response.json().accessToken);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/accounts/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"accounts",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('username', 'khanhtester');\r",
									"pm.collectionVariables.set('password', 'khanhtester');\r",
									"pm.collectionVariables.set('email', 'khanhtester@gmail.com');\r",
									"pm.collectionVariables.set('firstName', 'Khanh');\r",
									"pm.collectionVariables.set('lastName', 'Nguyen');\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"User created successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"lastName\": \"{{lastName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/accounts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgot password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Password reset successful\");\r",
									"});\r",
									"\r",
									"// Test that newPassword is present and save it to a collection variable\r",
									"pm.test(\"New password is present\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"newPassword\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"password\", jsonData.newPassword);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"email\": \"{{email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/accounts/forgot",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"accounts",
								"forgot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('newPassword', 'khanhtester');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Password updated successfully\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.collectionVariables.set('password', pm.collectionVariables.get('newPassword'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"oldPassword\": \"{{password}}\",\r\n  \"newPassword\": \"{{newPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/accounts/password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"accounts",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct logout message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Logout successful\");\r",
									"});\r",
									"\r",
									"pm.environment.set('accessToken', '');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a",
									"type": "text"
								},
								{
									"key": "password",
									"value": "khanh",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/accounts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"accounts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[/chatbot]",
			"item": [
				{
					"name": "Get history message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/chatbot",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chatbot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete history message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Chat history cleared successfully.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "accessToken",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInVzZXJuYW1lIjoiYSIsImlhdCI6MTc0MDAzNzIzNiwiZXhwIjoxNzQwMDgwNDM2fQ.JYdfFitM-sPK9T0CFVJOqvMCy8oIDARU-dpHFU-DXrc",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/chatbot",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chatbot"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send a message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response has a 'content' property\r",
									"pm.test(\"Response has content property\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"content\");\r",
									"});\r",
									"\r",
									"// Test that the 'content' property is a non-empty string\r",
									"pm.test(\"Content is a non-empty string\", function () {\r",
									"    pm.expect(jsonData.content).to.be.a(\"string\").and.to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "message",
									"value": "Hello World!",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/chatbot",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chatbot"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[/address]",
			"item": [
				{
					"name": "Get all address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/address",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"address"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct message\r",
									"pm.test(\"Response contains addressId and correct message\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"addressId\");\r",
									"    pm.expect(jsonData.addressId).to.be.a('number');\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Address added successfully\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"addressId\", pm.response.json().addressId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('addressFullName', 'Nguyen Van Khanh');\r",
									"pm.collectionVariables.set('address', 'Go Vap - HCM');\r",
									"pm.collectionVariables.set('addressPhone', '0987654321');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fullName\": \"{{addressFullName}}\",\r\n    \"address\": \"{{address}}\",\r\n    \"phone\": \"{{addressPhone}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/address",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"address"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains all required properties\r",
									"pm.test(\"Response contains required properties\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"full_name\");\r",
									"    pm.expect(jsonData).to.have.property(\"address\");\r",
									"    pm.expect(jsonData).to.have.property(\"phone\");\r",
									"});\r",
									"\r",
									"// Test that the properties have the correct types\r",
									"pm.test(\"Properties have correct types\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.full_name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.phone).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/address/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"address",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{addressId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('addressFullName', 'Truong Ngoc Hao');\r",
									"pm.collectionVariables.set('address', 'Go Vap - HCM');\r",
									"pm.collectionVariables.set('addressPhone', '0123456789');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Address updated successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fullName\": \"{{addressFullName}}\",\r\n    \"address\": \"{{address}}\",\r\n    \"phone\": \"{{addressPhone}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/address/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"address",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{addressId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Address deleted successfully\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set('addressId', '');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "accessToken",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInVzZXJuYW1lIjoiYSIsImlhdCI6MTc0MDAzNzIzNiwiZXhwIjoxNzQwMDgwNDM2fQ.JYdfFitM-sPK9T0CFVJOqvMCy8oIDARU-dpHFU-DXrc",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/address/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"address",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{addressId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[/carts]",
			"item": [
				{
					"name": "Get all items in cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "accessToken",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInVzZXJuYW1lIjoiYSIsImlhdCI6MTc0MDAzNzIzNiwiZXhwIjoxNzQwMDgwNDM2fQ.JYdfFitM-sPK9T0CFVJOqvMCy8oIDARU-dpHFU-DXrc",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add product to cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('productId', 1);\r",
									"pm.collectionVariables.set('quantity', 1);\r",
									"pm.collectionVariables.set('color', 'Đen');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Product added to cart successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": \"{{productId}}\",\r\n    \"quantity\": \"{{quantity}}\",\r\n    \"color\": \"{{color}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product in cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('quantity', 4);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Cart updated successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": \"{{productId}}\",\r\n    \"quantity\": \"{{quantity}}\",\r\n    \"color\": \"{{color}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/:productId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								":productId"
							],
							"variable": [
								{
									"key": "productId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete product from cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Product removed from cart successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"color\": \"{{color}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/:productId",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								":productId"
							],
							"variable": [
								{
									"key": "productId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[/orders]",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "accessToken",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInVzZXJuYW1lIjoiYSIsImlhdCI6MTc0MDAzNzIzNiwiZXhwIjoxNzQwMDgwNDM2fQ.JYdfFitM-sPK9T0CFVJOqvMCy8oIDARU-dpHFU-DXrc",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get info a order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the required properties\r",
									"pm.test(\"Response contains required order properties\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"orderAt\");\r",
									"    pm.expect(jsonData).to.have.property(\"payment\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"address\");\r",
									"    pm.expect(jsonData).to.have.property(\"totalPrice\");\r",
									"    pm.expect(jsonData).to.have.property(\"products\");\r",
									"});\r",
									"\r",
									"// Test that the properties have the correct types and values where applicable\r",
									"pm.test(\"Properties have correct types\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.orderAt).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.payment).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.totalPrice).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.address).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.products).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Test the address object properties\r",
									"pm.test(\"Address object has required properties\", function () {\r",
									"    pm.expect(jsonData.address).to.have.property(\"name\");\r",
									"    pm.expect(jsonData.address).to.have.property(\"phone\");\r",
									"    pm.expect(jsonData.address).to.have.property(\"address\");\r",
									"    pm.expect(jsonData.address.name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.phone).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.address).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Test the products array and its items\r",
									"pm.test(\"Products array items have required properties\", function () {\r",
									"    jsonData.products.forEach(function(product) {\r",
									"        pm.expect(product).to.have.property(\"id\");\r",
									"        pm.expect(product).to.have.property(\"name\");\r",
									"        pm.expect(product).to.have.property(\"color\");\r",
									"        pm.expect(product).to.have.property(\"price\");\r",
									"        pm.expect(product).to.have.property(\"quantity\");\r",
									"        pm.expect(product).to.have.property(\"totalPrice\");\r",
									"        \r",
									"        // Validate types\r",
									"        pm.expect(product.id).to.be.a(\"number\");\r",
									"        pm.expect(product.name).to.be.a(\"string\");\r",
									"        pm.expect(product.color).to.be.a(\"string\");\r",
									"        pm.expect(product.price).to.be.a(\"number\");\r",
									"        pm.expect(product.quantity).to.be.a(\"number\");\r",
									"        pm.expect(product.totalPrice).to.be.a(\"number\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{base_url}}/orders/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct message and orderId\r",
									"pm.test(\"Response has correct message and orderId\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Order created successfully\");\r",
									"    pm.expect(jsonData).to.have.property(\"orderId\");\r",
									"    pm.expect(jsonData.orderId).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"orderId\", pm.response.json().orderId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('payment', 'nganhang');\r",
									"pm.collectionVariables.set('products', JSON.stringify([{ \"id\": 1, \"color\": \"Đen\", \"quantity\": 1 }]));\r",
									"pm.collectionVariables.set('voucherCode', '');\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"payment\": \"{{payment}}\",\r\n  \"address\": \"{{addressId}}\",\r\n  \"products\": {{products}},\r\n  \"voucherCode\": \"{{voucherCode}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Success paid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Order status updated successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/:id/success",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								":id",
								"success"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel a order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains the correct cancellation message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Order canceled successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[/vouchers]",
			"item": [
				{
					"name": "Check voucher by Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response has the expected properties\r",
									"pm.test(\"Response contains all required properties\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData).to.have.property(\"discount\");\r",
									"    pm.expect(jsonData).to.have.property(\"count\");\r",
									"    pm.expect(jsonData).to.have.property(\"limit\");\r",
									"    pm.expect(jsonData).to.have.property(\"usedId\");\r",
									"});\r",
									"\r",
									"// Test that the properties have the correct types\r",
									"pm.test(\"Properties have correct types\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.discount).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.count).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.limit).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.usedId).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Test specific values\r",
									"pm.test(\"Discount value is 0.1\", function () {\r",
									"    pm.expect(jsonData.discount).to.eql(0.1);\r",
									"});\r",
									"\r",
									"// Optionally, test that usedId contains specific expected values\r",
									"pm.test(\"usedId contains number 1\", function () {\r",
									"    pm.expect(jsonData.usedId).to.include(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/vouchers/KHANHSTORE10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"vouchers",
								"KHANHSTORE10"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[/users]",
			"item": [
				{
					"name": "Get info user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response has all required properties\r",
									"pm.test(\"Response contains all required properties\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData).to.have.property(\"lock\");\r",
									"    pm.expect(jsonData).to.have.property(\"information\");\r",
									"});\r",
									"\r",
									"// Test that the properties have the correct types\r",
									"pm.test(\"Properties have correct types\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lock).to.be.a(\"boolean\");\r",
									"    pm.expect(jsonData.information).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Test the \"information\" array properties if available\r",
									"pm.test(\"Information array items have required properties\", function () {\r",
									"    jsonData.information.forEach(function(info) {\r",
									"        pm.expect(info).to.have.property(\"id\");\r",
									"        pm.expect(info).to.have.property(\"fullName\");\r",
									"        pm.expect(info).to.have.property(\"address\");\r",
									"        pm.expect(info).to.have.property(\"phone\");\r",
									"        \r",
									"        // Validate the types for each property in the information array\r",
									"        pm.expect(info.id).to.be.a(\"number\");\r",
									"        pm.expect(info.fullName).to.be.a(\"string\");\r",
									"        pm.expect(info.address).to.be.a(\"string\");\r",
									"        pm.expect(info.phone).to.be.a(\"string\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[/img]",
			"item": [
				{
					"name": "Get avatar url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains botAvatar and userAvatar\r",
									"pm.test(\"Response contains botAvatar and userAvatar\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"botAvatar\");\r",
									"    pm.expect(jsonData).to.have.property(\"userAvatar\");\r",
									"});\r",
									"\r",
									"// Test that botAvatar and userAvatar are strings\r",
									"pm.test(\"Avatar properties are strings\", function () {\r",
									"    pm.expect(jsonData.botAvatar).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.userAvatar).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/img",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"img"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[/status]",
			"item": [
				{
					"name": "Get status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test that the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// Test that the response contains \"status\" and \"chatbot\" properties\r",
									"pm.test(\"Response contains status and chatbot properties\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"chatbot\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "addressId",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "newPassword",
			"value": ""
		},
		{
			"key": "addressFullName",
			"value": ""
		},
		{
			"key": "address",
			"value": ""
		},
		{
			"key": "addressPhone",
			"value": ""
		},
		{
			"key": "productId",
			"value": ""
		},
		{
			"key": "quantity",
			"value": ""
		},
		{
			"key": "color",
			"value": ""
		},
		{
			"key": "payment",
			"value": ""
		},
		{
			"key": "products",
			"value": ""
		},
		{
			"key": "voucherCode",
			"value": ""
		}
	]
}